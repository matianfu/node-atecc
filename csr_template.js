const fs = require('fs')

/**

This is the csr template used in Microchip's aws-iot-zero-touch example.

It is a valid cert, which can be verified by openssl

openssl req -inform DER -in tmpl.csr -verify

it can also be verfied by the python script.

// top total 254 octets
0x30, <- tag
0x81, 0xfb, <- length 251 (165 + 12 + 74)

  // contains [integer 3, sequence 49, sequence 91, constructed 19]
  0x30, <- tag
  0x81, 0xa2, <- length 162

    // integer
    0x02, 0x01, 0x00, // 0, see layman's guide

    // contains [set 22, set 25]
    0x30, // tag
    0x2f, // length 47

      // contains [sequence] 
      0x31, // tag
      0x14, // length 20 

        // contains [ObjectIdentifier, Utf8String]  
        0x30, // sequence
        0x12, // length 18

          0x06, // ObjectIdentifier
          0x03, // length 3
          0x55, 0x04, 0x0a, // organizationName see layman's guide

          0x0c, // UTF8String
          0x0b, // length 11
          0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, // "Example Inc"

      0x31, // tag
      0x17, // length 23

        0x30, // sequence
        0x15, // length 21

          0x06, // ObjectIdentifier
          0x03, // length 3
          0x55, 0x04, 0x03, // commonName see layman's guid

          0x0c, // UTF8String
          0x0e, // length 14
          0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, // "Example Device"

    // contains [sequence, bitstring]
    0x30, // Sequence
    0x59, // length 89
      0x30, // Sequence
      0x13, // length 19

        0x06, // ObjectIdentifier
        0x07, // length 7
        0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, // ecPublicKey (ref ?)

        0x06, // ObjectIdentifier
        0x08, // length 8 
        0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, // RFC 6637 NIST P-256 curve OID 

      0x03, // bit string
      0x42, // length 66 (leading zero why?)
      0x00, 0x04, 0xd8, 0x70, 0xa4, 0xdf, 0x98, 0xb4, 0x6a, 0x93, 0x2b, 0xf7, 0x40,
      0x39, 0x86, 0x0f, 0xed, 0xd6, 0x69, 0x03, 0x6a, 0xe7, 0xe4, 0x84, 0x9f, 0xfc, 0xfb, 0x61, 0x50,
      0x63, 0x21, 0x95, 0xa8, 0x91, 0x2c, 0x98, 0x04, 0x0e, 0x9c, 0x2f, 0x03, 0xe1, 0xe4, 0x2e, 0xc7,
      0x93, 0x8c, 0x6b, 0xf4, 0xfb, 0x98, 0x4c, 0x50, 0xdb, 0x51, 0xa3, 0xee, 0x04, 0x1b, 0x55, 0xf0,
      0x60, 0x63, 0xeb, 0x46, 0x90, 

    // 
    0xa0, // ???
    0x11, // length 17

      0x30, // sequence
      0x0f, // length 15
        0x06, // ObjectIdentifier
        0x09, // length 9
        0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x0e, // PKCS #9 (1 2 840 113549 1 9) experimental ???
        0x31, // Set 
        0x02, // length 2
          0x30, // Sequence
          0x00, // length 0 (empty)

  // see rfc5754, ecdsa-with-sha256
  0x30, // Sequence
  0x0a, // length 10
    0x06, // ObjectIdentifier
    0x08, // length 8
    0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 

  // bit string signature
  0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x26, 0xab, 0x8a, 0x4f, 0x71,
  0x2c, 0xf9, 0xbb, 0x4f, 0xfa, 0xa4, 0xcd, 0x01, 0x48, 0xf1, 0xdf, 0x9c, 0xdc, 0xff, 0xa0, 0xff,
  0x53, 0x8f, 0x35, 0x8d, 0xd4, 0x3d, 0x49, 0xc0, 0x72, 0xf5, 0x0a, 0x02, 0x21, 0x00, 0xa5, 0x9d,
  0xb4, 0x11, 0x4b, 0xa1, 0x65, 0x7c, 0xbb, 0x48, 0xcf, 0x6d, 0xf6, 0xd0, 0x6a, 0x41, 0x00, 0x96,
  0xe1, 0xe2, 0x79, 0x73, 0xdb, 0xf7, 0x97, 0x80, 0x41, 0x9b, 0x35, 0x01, 0x88, 0x5e
*/
const tmpl = Buffer.from([
  /*           00    01    02    03    04    05    06    07    08    09    0A    0B    0C    0D    0E    0F  */
  /* ------------------------------------------------------------------------------------------------------- */
  /* 0x00 */ 0x30, 0x81, 0xfb, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x00, 0x30, 0x2f, 0x31, 0x14, 0x30, 0x12, 0x06,
  /* 0x10 */ 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0b, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e,
  /* 0x20 */ 0x63, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x0e, 0x45, 0x78, 0x61, 0x6d,
  /* 0x30 */ 0x70, 0x6c, 0x65, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07,
  /* 0x40 */ 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01,
  /* 0x50 */ 0x07, 0x03, 0x42, 0x00, 0x04, 0xd8, 0x70, 0xa4, 0xdf, 0x98, 0xb4, 0x6a, 0x93, 0x2b, 0xf7, 0x40,
  /* 0x60 */ 0x39, 0x86, 0x0f, 0xed, 0xd6, 0x69, 0x03, 0x6a, 0xe7, 0xe4, 0x84, 0x9f, 0xfc, 0xfb, 0x61, 0x50,
  /* 0x70 */ 0x63, 0x21, 0x95, 0xa8, 0x91, 0x2c, 0x98, 0x04, 0x0e, 0x9c, 0x2f, 0x03, 0xe1, 0xe4, 0x2e, 0xc7,
  /* 0x80 */ 0x93, 0x8c, 0x6b, 0xf4, 0xfb, 0x98, 0x4c, 0x50, 0xdb, 0x51, 0xa3, 0xee, 0x04, 0x1b, 0x55, 0xf0,
  /* 0x90 */ 0x60, 0x63, 0xeb, 0x46, 0x90, 0xa0, 0x11, 0x30, 0x0f, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
  /* 0xA0 */ 0x0d, 0x01, 0x09, 0x0e, 0x31, 0x02, 0x30, 0x00, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,
  /* 0xB0 */ 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x26, 0xab, 0x8a, 0x4f, 0x71,
  /* 0xC0 */ 0x2c, 0xf9, 0xbb, 0x4f, 0xfa, 0xa4, 0xcd, 0x01, 0x48, 0xf1, 0xdf, 0x9c, 0xdc, 0xff, 0xa0, 0xff,
  /* 0xD0 */ 0x53, 0x8f, 0x35, 0x8d, 0xd4, 0x3d, 0x49, 0xc0, 0x72, 0xf5, 0x0a, 0x02, 0x21, 0x00, 0xa5, 0x9d,
  /* 0xE0 */ 0xb4, 0x11, 0x4b, 0xa1, 0x65, 0x7c, 0xbb, 0x48, 0xcf, 0x6d, 0xf6, 0xd0, 0x6a, 0x41, 0x00, 0x96,
  /* 0xF0 */ 0xe1, 0xe2, 0x79, 0x73, 0xdb, 0xf7, 0x97, 0x80, 0x41, 0x9b, 0x35, 0x01, 0x88, 0x5e
])

fs.writeFile('tmpl.csr', tmpl, err => {
  if (err) {
    console.log(err)
  } else {
    console.log('written to tmpl.csr')
  }
})


